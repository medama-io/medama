// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DeleteUserParams is parameters of delete-user operation.
type DeleteUserParams struct {
	// Session token for authentication.
	MeSess string
}

func unpackDeleteUserParams(packed middleware.Parameters) (params DeleteUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	return params
}

func decodeDeleteUserParams(args [0]string, argsEscaped bool, r *http.Request) (params DeleteUserParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteWebsitesIDParams is parameters of delete-websites-id operation.
type DeleteWebsitesIDParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
}

func unpackDeleteWebsitesIDParams(packed middleware.Parameters) (params DeleteWebsitesIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	return params
}

func decodeDeleteWebsitesIDParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteWebsitesIDParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetEventPingParams is parameters of get-event-ping operation.
type GetEventPingParams struct {
	// If this exists, then user exists in cache and is not a unique user.
	IfModifiedSince OptString
	// Optional query parameter that is the current host and pathname of the page.
	U OptString
}

func unpackGetEventPingParams(packed middleware.Parameters) (params GetEventPingParams) {
	{
		key := middleware.ParameterKey{
			Name: "If-Modified-Since",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.IfModifiedSince = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "u",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.U = v.(OptString)
		}
	}
	return params
}

func decodeGetEventPingParams(args [0]string, argsEscaped bool, r *http.Request) (params GetEventPingParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: If-Modified-Since.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "If-Modified-Since",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIfModifiedSinceVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIfModifiedSinceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IfModifiedSince.SetTo(paramsDotIfModifiedSinceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "If-Modified-Since",
			In:   "header",
			Err:  err,
		}
	}
	// Decode query: u.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "u",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.U.SetTo(paramsDotUVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "u",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserParams is parameters of get-user operation.
type GetUserParams struct {
	// Session token for authentication.
	MeSess string
}

func unpackGetUserParams(packed middleware.Parameters) (params GetUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	return params
}

func decodeGetUserParams(args [0]string, argsEscaped bool, r *http.Request) (params GetUserParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}

// GetUserUsageParams is parameters of get-user-usage operation.
type GetUserUsageParams struct {
	// Session token for authentication.
	MeSess string
}

func unpackGetUserUsageParams(packed middleware.Parameters) (params GetUserUsageParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	return params
}

func decodeGetUserUsageParams(args [0]string, argsEscaped bool, r *http.Request) (params GetUserUsageParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDBrowsersParams is parameters of get-website-id-browsers operation.
type GetWebsiteIDBrowsersParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Return a summary of the stats.
	Summary OptBool
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDBrowsersParams(packed middleware.Parameters) (params GetWebsiteIDBrowsersParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDBrowsersParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDBrowsersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDCampaignsParams is parameters of get-website-id-campaigns operation.
type GetWebsiteIDCampaignsParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Return a summary of the stats.
	Summary OptBool
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDCampaignsParams(packed middleware.Parameters) (params GetWebsiteIDCampaignsParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDCampaignsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDCampaignsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDCountryParams is parameters of get-website-id-country operation.
type GetWebsiteIDCountryParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Return a summary of the stats.
	Summary OptBool
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDCountryParams(packed middleware.Parameters) (params GetWebsiteIDCountryParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDCountryParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDCountryParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDDeviceParams is parameters of get-website-id-device operation.
type GetWebsiteIDDeviceParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Return a summary of the stats.
	Summary OptBool
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDDeviceParams(packed middleware.Parameters) (params GetWebsiteIDDeviceParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDDeviceParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDDeviceParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDLanguageParams is parameters of get-website-id-language operation.
type GetWebsiteIDLanguageParams struct {
	// Whether to return the language name or the language dialect/locale.
	Locale OptBool
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Return a summary of the stats.
	Summary OptBool
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDLanguageParams(packed middleware.Parameters) (params GetWebsiteIDLanguageParams) {
	{
		key := middleware.ParameterKey{
			Name: "locale",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Locale = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDLanguageParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDLanguageParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Set default value for query: locale.
	{
		val := bool(false)
		params.Locale.SetTo(val)
	}
	// Decode query: locale.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "locale",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLocaleVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotLocaleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Locale.SetTo(paramsDotLocaleVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "locale",
			In:   "query",
			Err:  err,
		}
	}
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDMediumsParams is parameters of get-website-id-mediums operation.
type GetWebsiteIDMediumsParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Return a summary of the stats.
	Summary OptBool
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDMediumsParams(packed middleware.Parameters) (params GetWebsiteIDMediumsParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDMediumsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDMediumsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDOsParams is parameters of get-website-id-os operation.
type GetWebsiteIDOsParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Return a summary of the stats.
	Summary OptBool
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDOsParams(packed middleware.Parameters) (params GetWebsiteIDOsParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDOsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDOsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDPagesParams is parameters of get-website-id-pages operation.
type GetWebsiteIDPagesParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Return a summary of the stats.
	Summary OptBool
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDPagesParams(packed middleware.Parameters) (params GetWebsiteIDPagesParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDPagesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDPagesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDPropertiesParams is parameters of get-website-id-properties operation.
type GetWebsiteIDPropertiesParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDPropertiesParams(packed middleware.Parameters) (params GetWebsiteIDPropertiesParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDPropertiesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDPropertiesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDReferrersParams is parameters of get-website-id-referrers operation.
type GetWebsiteIDReferrersParams struct {
	// Whether to return the grouped aggregation name or only URLs.
	Grouped OptBool
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Return a summary of the stats.
	Summary OptBool
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDReferrersParams(packed middleware.Parameters) (params GetWebsiteIDReferrersParams) {
	{
		key := middleware.ParameterKey{
			Name: "grouped",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Grouped = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDReferrersParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDReferrersParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Set default value for query: grouped.
	{
		val := bool(true)
		params.Grouped.SetTo(val)
	}
	// Decode query: grouped.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "grouped",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGroupedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotGroupedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Grouped.SetTo(paramsDotGroupedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "grouped",
			In:   "query",
			Err:  err,
		}
	}
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDSourcesParams is parameters of get-website-id-sources operation.
type GetWebsiteIDSourcesParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Return a summary of the stats.
	Summary OptBool
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDSourcesParams(packed middleware.Parameters) (params GetWebsiteIDSourcesParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDSourcesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDSourcesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDSummaryParams is parameters of get-website-id-summary operation.
type GetWebsiteIDSummaryParams struct {
	// Retrieve the data from the previous period as well. This is useful when comparing data from the
	// previous period to the current period. Requires the start and end period parameters to be set.
	Previous OptBool
	// The interval to group the data by. This can be set to minute, hour, day, week or month. This will
	// return an interval property if set.
	Interval OptGetWebsiteIDSummaryInterval
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
}

func unpackGetWebsiteIDSummaryParams(packed middleware.Parameters) (params GetWebsiteIDSummaryParams) {
	{
		key := middleware.ParameterKey{
			Name: "previous",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Previous = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "interval",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Interval = v.(OptGetWebsiteIDSummaryInterval)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	return params
}

func decodeGetWebsiteIDSummaryParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDSummaryParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Set default value for query: previous.
	{
		val := bool(false)
		params.Previous.SetTo(val)
	}
	// Decode query: previous.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "previous",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPreviousVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotPreviousVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Previous.SetTo(paramsDotPreviousVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "previous",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: interval.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "interval",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIntervalVal GetWebsiteIDSummaryInterval
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIntervalVal = GetWebsiteIDSummaryInterval(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Interval.SetTo(paramsDotIntervalVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Interval.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "interval",
			In:   "query",
			Err:  err,
		}
	}
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsiteIDTimeParams is parameters of get-website-id-time operation.
type GetWebsiteIDTimeParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
	// Return a summary of the stats.
	Summary OptBool
	// Period start date using date-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	Start OptDateTime
	// Period end date using fdate-time notation in RFC3339 format, for example, (2017-07-21T17:32:28Z).
	End OptDateTime
	// Path of the page.
	Path OptFilterString
	// Referrer URL of the page hit.
	Referrer OptFilterString
	// UTM source of the page hit.
	UtmSource OptFilterString
	// UTM medium of the page hit.
	UtmMedium OptFilterString
	// UTM campaign of the page hit.
	UtmCampaign OptFilterString
	// Browser name.
	Browser OptFilterString
	// Operating system name.
	Os OptFilterString
	// Device type.
	Device OptFilterString
	// Country name.
	Country OptFilterString
	// Language code.
	Language OptFilterString
	// Name of the property.
	PropName OptFilterString
	// Value of the property.
	PropValue OptFilterString
	// Limit the number of results.
	Limit OptInt
	// Offset the results paired with the limit parameter.
	Offset OptInt
}

func unpackGetWebsiteIDTimeParams(packed middleware.Parameters) (params GetWebsiteIDTimeParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "referrer",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Referrer = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_source",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmSource = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_medium",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmMedium = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "utm_campaign",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UtmCampaign = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "browser",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Browser = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "os",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Os = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "device",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Device = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "country",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Country = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "language",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Language = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropName = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "prop_value",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PropValue = v.(OptFilterString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	return params
}

func decodeGetWebsiteIDTimeParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsiteIDTimeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal FilterString
				if err := func() error {
					return paramsDotPathVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: referrer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "referrer",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReferrerVal FilterString
				if err := func() error {
					return paramsDotReferrerVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Referrer.SetTo(paramsDotReferrerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "referrer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_source.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_source",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmSourceVal FilterString
				if err := func() error {
					return paramsDotUtmSourceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmSource.SetTo(paramsDotUtmSourceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_source",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_medium.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_medium",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmMediumVal FilterString
				if err := func() error {
					return paramsDotUtmMediumVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmMedium.SetTo(paramsDotUtmMediumVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_medium",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: utm_campaign.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "utm_campaign",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUtmCampaignVal FilterString
				if err := func() error {
					return paramsDotUtmCampaignVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.UtmCampaign.SetTo(paramsDotUtmCampaignVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "utm_campaign",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: browser.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "browser",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrowserVal FilterString
				if err := func() error {
					return paramsDotBrowserVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Browser.SetTo(paramsDotBrowserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "browser",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: os.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "os",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOsVal FilterString
				if err := func() error {
					return paramsDotOsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Os.SetTo(paramsDotOsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "os",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: device.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "device",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeviceVal FilterString
				if err := func() error {
					return paramsDotDeviceVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Device.SetTo(paramsDotDeviceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "device",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: country.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "country",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCountryVal FilterString
				if err := func() error {
					return paramsDotCountryVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Country.SetTo(paramsDotCountryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "country",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: language.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "language",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLanguageVal FilterString
				if err := func() error {
					return paramsDotLanguageVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Language.SetTo(paramsDotLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "language",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_name",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropNameVal FilterString
				if err := func() error {
					return paramsDotPropNameVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropName.SetTo(paramsDotPropNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: prop_value.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "prop_value",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "eq", Required: false}, {Name: "neq", Required: false}, {Name: "contains", Required: false}, {Name: "not_contains", Required: false}, {Name: "starts_with", Required: false}, {Name: "not_starts_with", Required: false}, {Name: "ends_with", Required: false}, {Name: "not_ends_with", Required: false}, {Name: "in", Required: false}, {Name: "not_in", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPropValueVal FilterString
				if err := func() error {
					return paramsDotPropValueVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.PropValue.SetTo(paramsDotPropValueVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "prop_value",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        true,
							Max:           5000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsitesParams is parameters of get-websites operation.
type GetWebsitesParams struct {
	// Session token for authentication.
	MeSess string
	// Return a summary of the stats.
	Summary OptBool
}

func unpackGetWebsitesParams(packed middleware.Parameters) (params GetWebsitesParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summary = v.(OptBool)
		}
	}
	return params
}

func decodeGetWebsitesParams(args [0]string, argsEscaped bool, r *http.Request) (params GetWebsitesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Set default value for query: summary.
	{
		val := bool(false)
		params.Summary.SetTo(val)
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummaryVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummaryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summary.SetTo(paramsDotSummaryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWebsitesIDParams is parameters of get-websites-id operation.
type GetWebsitesIDParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
}

func unpackGetWebsitesIDParams(packed middleware.Parameters) (params GetWebsitesIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	return params
}

func decodeGetWebsitesIDParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWebsitesIDParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PatchUserParams is parameters of patch-user operation.
type PatchUserParams struct {
	// Session token for authentication.
	MeSess string
}

func unpackPatchUserParams(packed middleware.Parameters) (params PatchUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	return params
}

func decodePatchUserParams(args [0]string, argsEscaped bool, r *http.Request) (params PatchUserParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}

// PatchWebsitesIDParams is parameters of patch-websites-id operation.
type PatchWebsitesIDParams struct {
	// Session token for authentication.
	MeSess string
	// Hostname for the website.
	Hostname string
}

func unpackPatchWebsitesIDParams(packed middleware.Parameters) (params PatchWebsitesIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "hostname",
			In:   "path",
		}
		params.Hostname = packed[key].(string)
	}
	return params
}

func decodePatchWebsitesIDParams(args [1]string, argsEscaped bool, r *http.Request) (params PatchWebsitesIDParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode path: hostname.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hostname",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Hostname = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    253,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.Hostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hostname",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PostAuthLogoutParams is parameters of post-auth-logout operation.
type PostAuthLogoutParams struct {
	// Session token for authentication.
	MeSess string
}

func unpackPostAuthLogoutParams(packed middleware.Parameters) (params PostAuthLogoutParams) {
	{
		key := middleware.ParameterKey{
			Name: "_me_sess",
			In:   "cookie",
		}
		params.MeSess = packed[key].(string)
	}
	return params
}

func decodePostAuthLogoutParams(args [0]string, argsEscaped bool, r *http.Request) (params PostAuthLogoutParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _me_sess.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_me_sess",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.MeSess = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_me_sess",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}

// PostEventHitParams is parameters of post-event-hit operation.
type PostEventHitParams struct {
	// Used to infer user browser, OS and device.
	UserAgent OptString
	// Used to infer user language.
	AcceptLanguage OptString
}

func unpackPostEventHitParams(packed middleware.Parameters) (params PostEventHitParams) {
	{
		key := middleware.ParameterKey{
			Name: "User-Agent",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.UserAgent = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "Accept-Language",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.AcceptLanguage = v.(OptString)
		}
	}
	return params
}

func decodePostEventHitParams(args [0]string, argsEscaped bool, r *http.Request) (params PostEventHitParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: User-Agent.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "User-Agent",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUserAgentVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUserAgentVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UserAgent.SetTo(paramsDotUserAgentVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "User-Agent",
			In:   "header",
			Err:  err,
		}
	}
	// Decode header: Accept-Language.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Accept-Language",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAcceptLanguageVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAcceptLanguageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.AcceptLanguage.SetTo(paramsDotAcceptLanguageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Accept-Language",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
