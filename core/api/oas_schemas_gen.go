// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/url"
	"time"

	"github.com/go-faster/errors"
)

// Request body for logging in.
// Ref: #/components/schemas/AuthLogin
type AuthLogin struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *AuthLogin) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *AuthLogin) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *AuthLogin) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *AuthLogin) SetPassword(val string) {
	s.Password = val
}

type BadRequestError struct {
	Error BadRequestErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *BadRequestError) GetError() BadRequestErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *BadRequestError) SetError(val BadRequestErrorError) {
	s.Error = val
}

func (*BadRequestError) deleteUserRes()            {}
func (*BadRequestError) deleteWebsitesIDRes()      {}
func (*BadRequestError) getEventPingRes()          {}
func (*BadRequestError) getUserRes()               {}
func (*BadRequestError) getWebsiteIDBrowsersRes()  {}
func (*BadRequestError) getWebsiteIDCampaignsRes() {}
func (*BadRequestError) getWebsiteIDCountryRes()   {}
func (*BadRequestError) getWebsiteIDDeviceRes()    {}
func (*BadRequestError) getWebsiteIDLanguageRes()  {}
func (*BadRequestError) getWebsiteIDMediumsRes()   {}
func (*BadRequestError) getWebsiteIDOsRes()        {}
func (*BadRequestError) getWebsiteIDPagesRes()     {}
func (*BadRequestError) getWebsiteIDReferrersRes() {}
func (*BadRequestError) getWebsiteIDSourcesRes()   {}
func (*BadRequestError) getWebsiteIDSummaryRes()   {}
func (*BadRequestError) getWebsiteIDTimeRes()      {}
func (*BadRequestError) getWebsitesIDRes()         {}
func (*BadRequestError) getWebsitesRes()           {}
func (*BadRequestError) patchUserRes()             {}
func (*BadRequestError) patchWebsitesIDRes()       {}
func (*BadRequestError) postAuthLoginRes()         {}
func (*BadRequestError) postEventHitRes()          {}
func (*BadRequestError) postWebsitesRes()          {}

type BadRequestErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestErrorError) SetMessage(val string) {
	s.Message = val
}

type ConflictError struct {
	Error ConflictErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *ConflictError) GetError() ConflictErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ConflictError) SetError(val ConflictErrorError) {
	s.Error = val
}

func (*ConflictError) deleteUserRes()   {}
func (*ConflictError) patchUserRes()    {}
func (*ConflictError) postWebsitesRes() {}

type ConflictErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConflictErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConflictErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConflictErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConflictErrorError) SetMessage(val string) {
	s.Message = val
}

type CookieAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *CookieAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *CookieAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// DeleteUserOK is response for DeleteUser operation.
type DeleteUserOK struct{}

func (*DeleteUserOK) deleteUserRes() {}

// DeleteWebsitesIDOK is response for DeleteWebsitesID operation.
type DeleteWebsitesIDOK struct{}

func (*DeleteWebsitesIDOK) deleteWebsitesIDRes() {}

// Website hit event.
// Ref: #/components/schemas/EventHit
// EventHit represents sum type.
type EventHit struct {
	Type        EventHitType // switch on this field
	EventLoad   EventLoad
	EventUnload EventUnload
}

// EventHitType is oneOf type of EventHit.
type EventHitType string

// Possible values for EventHitType.
const (
	EventLoadEventHit   EventHitType = "load"
	EventUnloadEventHit EventHitType = "unload"
)

// IsEventLoad reports whether EventHit is EventLoad.
func (s EventHit) IsEventLoad() bool { return s.Type == EventLoadEventHit }

// IsEventUnload reports whether EventHit is EventUnload.
func (s EventHit) IsEventUnload() bool { return s.Type == EventUnloadEventHit }

// SetEventLoad sets EventHit to EventLoad.
func (s *EventHit) SetEventLoad(v EventLoad) {
	s.Type = EventLoadEventHit
	s.EventLoad = v
}

// GetEventLoad returns EventLoad and true boolean if EventHit is EventLoad.
func (s EventHit) GetEventLoad() (v EventLoad, ok bool) {
	if !s.IsEventLoad() {
		return v, false
	}
	return s.EventLoad, true
}

// NewEventLoadEventHit returns new EventHit from EventLoad.
func NewEventLoadEventHit(v EventLoad) EventHit {
	var s EventHit
	s.SetEventLoad(v)
	return s
}

// SetEventUnload sets EventHit to EventUnload.
func (s *EventHit) SetEventUnload(v EventUnload) {
	s.Type = EventUnloadEventHit
	s.EventUnload = v
}

// GetEventUnload returns EventUnload and true boolean if EventHit is EventUnload.
func (s EventHit) GetEventUnload() (v EventUnload, ok bool) {
	if !s.IsEventUnload() {
		return v, false
	}
	return s.EventUnload, true
}

// NewEventUnloadEventHit returns new EventHit from EventUnload.
func NewEventUnloadEventHit(v EventUnload) EventHit {
	var s EventHit
	s.SetEventUnload(v)
	return s
}

// Page view load event.
// Ref: #/components/schemas/EventLoad
type EventLoad struct {
	// Beacon ID generated for each user to link multiple events on the same page together.
	B string `json:"b"`
	// Page URL including query parameters.
	U url.URL `json:"u"`
	// Referrer URL.
	R OptString `json:"r"`
	// If the user is a unique user or not.
	P bool `json:"p"`
	// If the user has visited this page before or not.
	Q bool `json:"q"`
	// Timezone of the user.
	T OptString `json:"t"`
}

// GetB returns the value of B.
func (s *EventLoad) GetB() string {
	return s.B
}

// GetU returns the value of U.
func (s *EventLoad) GetU() url.URL {
	return s.U
}

// GetR returns the value of R.
func (s *EventLoad) GetR() OptString {
	return s.R
}

// GetP returns the value of P.
func (s *EventLoad) GetP() bool {
	return s.P
}

// GetQ returns the value of Q.
func (s *EventLoad) GetQ() bool {
	return s.Q
}

// GetT returns the value of T.
func (s *EventLoad) GetT() OptString {
	return s.T
}

// SetB sets the value of B.
func (s *EventLoad) SetB(val string) {
	s.B = val
}

// SetU sets the value of U.
func (s *EventLoad) SetU(val url.URL) {
	s.U = val
}

// SetR sets the value of R.
func (s *EventLoad) SetR(val OptString) {
	s.R = val
}

// SetP sets the value of P.
func (s *EventLoad) SetP(val bool) {
	s.P = val
}

// SetQ sets the value of Q.
func (s *EventLoad) SetQ(val bool) {
	s.Q = val
}

// SetT sets the value of T.
func (s *EventLoad) SetT(val OptString) {
	s.T = val
}

// Page view unload event.
// Ref: #/components/schemas/EventUnload
type EventUnload struct {
	// Beacon ID generated for each user to link multiple events on the same page together.
	B string `json:"b"`
	// Time spent on page in milliseconds.
	M int `json:"m"`
}

// GetB returns the value of B.
func (s *EventUnload) GetB() string {
	return s.B
}

// GetM returns the value of M.
func (s *EventUnload) GetM() int {
	return s.M
}

// SetB sets the value of B.
func (s *EventUnload) SetB(val string) {
	s.B = val
}

// SetM sets the value of M.
func (s *EventUnload) SetM(val int) {
	s.M = val
}

// Ref: #/components/schemas/FilterFixed
type FilterFixed struct {
	// Equal to.
	Eq OptString `json:"eq"`
	// Not equal to.
	Neq OptString `json:"neq"`
	// In.
	In OptString `json:"in"`
	// Not in.
	NotIn OptString `json:"not_in"`
}

// GetEq returns the value of Eq.
func (s *FilterFixed) GetEq() OptString {
	return s.Eq
}

// GetNeq returns the value of Neq.
func (s *FilterFixed) GetNeq() OptString {
	return s.Neq
}

// GetIn returns the value of In.
func (s *FilterFixed) GetIn() OptString {
	return s.In
}

// GetNotIn returns the value of NotIn.
func (s *FilterFixed) GetNotIn() OptString {
	return s.NotIn
}

// SetEq sets the value of Eq.
func (s *FilterFixed) SetEq(val OptString) {
	s.Eq = val
}

// SetNeq sets the value of Neq.
func (s *FilterFixed) SetNeq(val OptString) {
	s.Neq = val
}

// SetIn sets the value of In.
func (s *FilterFixed) SetIn(val OptString) {
	s.In = val
}

// SetNotIn sets the value of NotIn.
func (s *FilterFixed) SetNotIn(val OptString) {
	s.NotIn = val
}

// Ref: #/components/schemas/FilterString
type FilterString struct {
	// Equal to.
	Eq OptString `json:"eq"`
	// Not equal to.
	Neq OptString `json:"neq"`
	// Contains.
	Contains OptString `json:"contains"`
	// Does not contain.
	NotContains OptString `json:"not_contains"`
	// Starts with.
	StartsWith OptString `json:"starts_with"`
	// Does not start with.
	NotStartsWith OptString `json:"not_starts_with"`
	// Ends with.
	EndsWith OptString `json:"ends_with"`
	// Does not end with.
	NotEndsWith OptString `json:"not_ends_with"`
	// In.
	In OptString `json:"in"`
	// Not in.
	NotIn OptString `json:"not_in"`
}

// GetEq returns the value of Eq.
func (s *FilterString) GetEq() OptString {
	return s.Eq
}

// GetNeq returns the value of Neq.
func (s *FilterString) GetNeq() OptString {
	return s.Neq
}

// GetContains returns the value of Contains.
func (s *FilterString) GetContains() OptString {
	return s.Contains
}

// GetNotContains returns the value of NotContains.
func (s *FilterString) GetNotContains() OptString {
	return s.NotContains
}

// GetStartsWith returns the value of StartsWith.
func (s *FilterString) GetStartsWith() OptString {
	return s.StartsWith
}

// GetNotStartsWith returns the value of NotStartsWith.
func (s *FilterString) GetNotStartsWith() OptString {
	return s.NotStartsWith
}

// GetEndsWith returns the value of EndsWith.
func (s *FilterString) GetEndsWith() OptString {
	return s.EndsWith
}

// GetNotEndsWith returns the value of NotEndsWith.
func (s *FilterString) GetNotEndsWith() OptString {
	return s.NotEndsWith
}

// GetIn returns the value of In.
func (s *FilterString) GetIn() OptString {
	return s.In
}

// GetNotIn returns the value of NotIn.
func (s *FilterString) GetNotIn() OptString {
	return s.NotIn
}

// SetEq sets the value of Eq.
func (s *FilterString) SetEq(val OptString) {
	s.Eq = val
}

// SetNeq sets the value of Neq.
func (s *FilterString) SetNeq(val OptString) {
	s.Neq = val
}

// SetContains sets the value of Contains.
func (s *FilterString) SetContains(val OptString) {
	s.Contains = val
}

// SetNotContains sets the value of NotContains.
func (s *FilterString) SetNotContains(val OptString) {
	s.NotContains = val
}

// SetStartsWith sets the value of StartsWith.
func (s *FilterString) SetStartsWith(val OptString) {
	s.StartsWith = val
}

// SetNotStartsWith sets the value of NotStartsWith.
func (s *FilterString) SetNotStartsWith(val OptString) {
	s.NotStartsWith = val
}

// SetEndsWith sets the value of EndsWith.
func (s *FilterString) SetEndsWith(val OptString) {
	s.EndsWith = val
}

// SetNotEndsWith sets the value of NotEndsWith.
func (s *FilterString) SetNotEndsWith(val OptString) {
	s.NotEndsWith = val
}

// SetIn sets the value of In.
func (s *FilterString) SetIn(val OptString) {
	s.In = val
}

// SetNotIn sets the value of NotIn.
func (s *FilterString) SetNotIn(val OptString) {
	s.NotIn = val
}

type ForbiddenError struct {
	Error ForbiddenErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *ForbiddenError) GetError() ForbiddenErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *ForbiddenError) SetError(val ForbiddenErrorError) {
	s.Error = val
}

func (*ForbiddenError) getWebsiteIDBrowsersRes()  {}
func (*ForbiddenError) getWebsiteIDCampaignsRes() {}
func (*ForbiddenError) getWebsiteIDCountryRes()   {}
func (*ForbiddenError) getWebsiteIDDeviceRes()    {}
func (*ForbiddenError) getWebsiteIDLanguageRes()  {}
func (*ForbiddenError) getWebsiteIDMediumsRes()   {}
func (*ForbiddenError) getWebsiteIDOsRes()        {}
func (*ForbiddenError) getWebsiteIDReferrersRes() {}
func (*ForbiddenError) getWebsiteIDSourcesRes()   {}

type ForbiddenErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ForbiddenErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ForbiddenErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ForbiddenErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ForbiddenErrorError) SetMessage(val string) {
	s.Message = val
}

// This is set to 0 if the user is a unique user, otherwise 1.
type GetEventPingOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetEventPingOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetEventPingOKHeaders wraps GetEventPingOK with response headers.
type GetEventPingOKHeaders struct {
	CacheControl string
	LastModified string
	Response     GetEventPingOK
}

// GetCacheControl returns the value of CacheControl.
func (s *GetEventPingOKHeaders) GetCacheControl() string {
	return s.CacheControl
}

// GetLastModified returns the value of LastModified.
func (s *GetEventPingOKHeaders) GetLastModified() string {
	return s.LastModified
}

// GetResponse returns the value of Response.
func (s *GetEventPingOKHeaders) GetResponse() GetEventPingOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *GetEventPingOKHeaders) SetCacheControl(val string) {
	s.CacheControl = val
}

// SetLastModified sets the value of LastModified.
func (s *GetEventPingOKHeaders) SetLastModified(val string) {
	s.LastModified = val
}

// SetResponse sets the value of Response.
func (s *GetEventPingOKHeaders) SetResponse(val GetEventPingOK) {
	s.Response = val
}

func (*GetEventPingOKHeaders) getEventPingRes() {}

type GetWebsiteIDSummaryInterval string

const (
	GetWebsiteIDSummaryIntervalMinute GetWebsiteIDSummaryInterval = "minute"
	GetWebsiteIDSummaryIntervalHour   GetWebsiteIDSummaryInterval = "hour"
	GetWebsiteIDSummaryIntervalDay    GetWebsiteIDSummaryInterval = "day"
	GetWebsiteIDSummaryIntervalWeek   GetWebsiteIDSummaryInterval = "week"
	GetWebsiteIDSummaryIntervalMonth  GetWebsiteIDSummaryInterval = "month"
)

// AllValues returns all GetWebsiteIDSummaryInterval values.
func (GetWebsiteIDSummaryInterval) AllValues() []GetWebsiteIDSummaryInterval {
	return []GetWebsiteIDSummaryInterval{
		GetWebsiteIDSummaryIntervalMinute,
		GetWebsiteIDSummaryIntervalHour,
		GetWebsiteIDSummaryIntervalDay,
		GetWebsiteIDSummaryIntervalWeek,
		GetWebsiteIDSummaryIntervalMonth,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetWebsiteIDSummaryInterval) MarshalText() ([]byte, error) {
	switch s {
	case GetWebsiteIDSummaryIntervalMinute:
		return []byte(s), nil
	case GetWebsiteIDSummaryIntervalHour:
		return []byte(s), nil
	case GetWebsiteIDSummaryIntervalDay:
		return []byte(s), nil
	case GetWebsiteIDSummaryIntervalWeek:
		return []byte(s), nil
	case GetWebsiteIDSummaryIntervalMonth:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetWebsiteIDSummaryInterval) UnmarshalText(data []byte) error {
	switch GetWebsiteIDSummaryInterval(data) {
	case GetWebsiteIDSummaryIntervalMinute:
		*s = GetWebsiteIDSummaryIntervalMinute
		return nil
	case GetWebsiteIDSummaryIntervalHour:
		*s = GetWebsiteIDSummaryIntervalHour
		return nil
	case GetWebsiteIDSummaryIntervalDay:
		*s = GetWebsiteIDSummaryIntervalDay
		return nil
	case GetWebsiteIDSummaryIntervalWeek:
		*s = GetWebsiteIDSummaryIntervalWeek
		return nil
	case GetWebsiteIDSummaryIntervalMonth:
		*s = GetWebsiteIDSummaryIntervalMonth
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetWebsitesOKApplicationJSON []WebsiteGet

func (*GetWebsitesOKApplicationJSON) getWebsitesRes() {}

type InternalServerError struct {
	Error InternalServerErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *InternalServerError) GetError() InternalServerErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *InternalServerError) SetError(val InternalServerErrorError) {
	s.Error = val
}

func (*InternalServerError) deleteUserRes()            {}
func (*InternalServerError) deleteWebsitesIDRes()      {}
func (*InternalServerError) getEventPingRes()          {}
func (*InternalServerError) getUserRes()               {}
func (*InternalServerError) getWebsiteIDBrowsersRes()  {}
func (*InternalServerError) getWebsiteIDCampaignsRes() {}
func (*InternalServerError) getWebsiteIDCountryRes()   {}
func (*InternalServerError) getWebsiteIDDeviceRes()    {}
func (*InternalServerError) getWebsiteIDLanguageRes()  {}
func (*InternalServerError) getWebsiteIDMediumsRes()   {}
func (*InternalServerError) getWebsiteIDOsRes()        {}
func (*InternalServerError) getWebsiteIDPagesRes()     {}
func (*InternalServerError) getWebsiteIDReferrersRes() {}
func (*InternalServerError) getWebsiteIDSourcesRes()   {}
func (*InternalServerError) getWebsiteIDSummaryRes()   {}
func (*InternalServerError) getWebsiteIDTimeRes()      {}
func (*InternalServerError) getWebsitesIDRes()         {}
func (*InternalServerError) getWebsitesRes()           {}
func (*InternalServerError) patchUserRes()             {}
func (*InternalServerError) patchWebsitesIDRes()       {}
func (*InternalServerError) postAuthLoginRes()         {}
func (*InternalServerError) postAuthLogoutRes()        {}
func (*InternalServerError) postEventHitRes()          {}
func (*InternalServerError) postWebsitesRes()          {}

type InternalServerErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerErrorError) SetMessage(val string) {
	s.Message = val
}

type NotFoundError struct {
	Error NotFoundErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *NotFoundError) GetError() NotFoundErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *NotFoundError) SetError(val NotFoundErrorError) {
	s.Error = val
}

func (*NotFoundError) deleteUserRes()            {}
func (*NotFoundError) deleteWebsitesIDRes()      {}
func (*NotFoundError) getUserRes()               {}
func (*NotFoundError) getWebsiteIDBrowsersRes()  {}
func (*NotFoundError) getWebsiteIDCampaignsRes() {}
func (*NotFoundError) getWebsiteIDCountryRes()   {}
func (*NotFoundError) getWebsiteIDDeviceRes()    {}
func (*NotFoundError) getWebsiteIDLanguageRes()  {}
func (*NotFoundError) getWebsiteIDMediumsRes()   {}
func (*NotFoundError) getWebsiteIDOsRes()        {}
func (*NotFoundError) getWebsiteIDPagesRes()     {}
func (*NotFoundError) getWebsiteIDReferrersRes() {}
func (*NotFoundError) getWebsiteIDSourcesRes()   {}
func (*NotFoundError) getWebsiteIDSummaryRes()   {}
func (*NotFoundError) getWebsiteIDTimeRes()      {}
func (*NotFoundError) getWebsitesIDRes()         {}
func (*NotFoundError) getWebsitesRes()           {}
func (*NotFoundError) patchUserRes()             {}
func (*NotFoundError) patchWebsitesIDRes()       {}
func (*NotFoundError) postAuthLoginRes()         {}
func (*NotFoundError) postEventHitRes()          {}

type NotFoundErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundErrorError) SetMessage(val string) {
	s.Message = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFilterFixed returns new OptFilterFixed with value set to v.
func NewOptFilterFixed(v FilterFixed) OptFilterFixed {
	return OptFilterFixed{
		Value: v,
		Set:   true,
	}
}

// OptFilterFixed is optional FilterFixed.
type OptFilterFixed struct {
	Value FilterFixed
	Set   bool
}

// IsSet returns true if OptFilterFixed was set.
func (o OptFilterFixed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFilterFixed) Reset() {
	var v FilterFixed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFilterFixed) SetTo(v FilterFixed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFilterFixed) Get() (v FilterFixed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFilterFixed) Or(d FilterFixed) FilterFixed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFilterString returns new OptFilterString with value set to v.
func NewOptFilterString(v FilterString) OptFilterString {
	return OptFilterString{
		Value: v,
		Set:   true,
	}
}

// OptFilterString is optional FilterString.
type OptFilterString struct {
	Value FilterString
	Set   bool
}

// IsSet returns true if OptFilterString was set.
func (o OptFilterString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFilterString) Reset() {
	var v FilterString
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFilterString) SetTo(v FilterString) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFilterString) Get() (v FilterString, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFilterString) Or(d FilterString) FilterString {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetWebsiteIDSummaryInterval returns new OptGetWebsiteIDSummaryInterval with value set to v.
func NewOptGetWebsiteIDSummaryInterval(v GetWebsiteIDSummaryInterval) OptGetWebsiteIDSummaryInterval {
	return OptGetWebsiteIDSummaryInterval{
		Value: v,
		Set:   true,
	}
}

// OptGetWebsiteIDSummaryInterval is optional GetWebsiteIDSummaryInterval.
type OptGetWebsiteIDSummaryInterval struct {
	Value GetWebsiteIDSummaryInterval
	Set   bool
}

// IsSet returns true if OptGetWebsiteIDSummaryInterval was set.
func (o OptGetWebsiteIDSummaryInterval) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetWebsiteIDSummaryInterval) Reset() {
	var v GetWebsiteIDSummaryInterval
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetWebsiteIDSummaryInterval) SetTo(v GetWebsiteIDSummaryInterval) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetWebsiteIDSummaryInterval) Get() (v GetWebsiteIDSummaryInterval, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetWebsiteIDSummaryInterval) Or(d GetWebsiteIDSummaryInterval) GetWebsiteIDSummaryInterval {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStatsSummaryPrevious returns new OptStatsSummaryPrevious with value set to v.
func NewOptStatsSummaryPrevious(v StatsSummaryPrevious) OptStatsSummaryPrevious {
	return OptStatsSummaryPrevious{
		Value: v,
		Set:   true,
	}
}

// OptStatsSummaryPrevious is optional StatsSummaryPrevious.
type OptStatsSummaryPrevious struct {
	Value StatsSummaryPrevious
	Set   bool
}

// IsSet returns true if OptStatsSummaryPrevious was set.
func (o OptStatsSummaryPrevious) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStatsSummaryPrevious) Reset() {
	var v StatsSummaryPrevious
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStatsSummaryPrevious) SetTo(v StatsSummaryPrevious) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStatsSummaryPrevious) Get() (v StatsSummaryPrevious, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStatsSummaryPrevious) Or(d StatsSummaryPrevious) StatsSummaryPrevious {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserPatchLanguage returns new OptUserPatchLanguage with value set to v.
func NewOptUserPatchLanguage(v UserPatchLanguage) OptUserPatchLanguage {
	return OptUserPatchLanguage{
		Value: v,
		Set:   true,
	}
}

// OptUserPatchLanguage is optional UserPatchLanguage.
type OptUserPatchLanguage struct {
	Value UserPatchLanguage
	Set   bool
}

// IsSet returns true if OptUserPatchLanguage was set.
func (o OptUserPatchLanguage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserPatchLanguage) Reset() {
	var v UserPatchLanguage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserPatchLanguage) SetTo(v UserPatchLanguage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserPatchLanguage) Get() (v UserPatchLanguage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserPatchLanguage) Or(d UserPatchLanguage) UserPatchLanguage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebsiteGetSummary returns new OptWebsiteGetSummary with value set to v.
func NewOptWebsiteGetSummary(v WebsiteGetSummary) OptWebsiteGetSummary {
	return OptWebsiteGetSummary{
		Value: v,
		Set:   true,
	}
}

// OptWebsiteGetSummary is optional WebsiteGetSummary.
type OptWebsiteGetSummary struct {
	Value WebsiteGetSummary
	Set   bool
}

// IsSet returns true if OptWebsiteGetSummary was set.
func (o OptWebsiteGetSummary) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebsiteGetSummary) Reset() {
	var v WebsiteGetSummary
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebsiteGetSummary) SetTo(v WebsiteGetSummary) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebsiteGetSummary) Get() (v WebsiteGetSummary, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebsiteGetSummary) Or(d WebsiteGetSummary) WebsiteGetSummary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// PostAuthLoginOK is response for PostAuthLogin operation.
type PostAuthLoginOK struct {
	SetCookie string
}

// GetSetCookie returns the value of SetCookie.
func (s *PostAuthLoginOK) GetSetCookie() string {
	return s.SetCookie
}

// SetSetCookie sets the value of SetCookie.
func (s *PostAuthLoginOK) SetSetCookie(val string) {
	s.SetCookie = val
}

func (*PostAuthLoginOK) postAuthLoginRes() {}

// PostAuthLogoutNoContent is response for PostAuthLogout operation.
type PostAuthLogoutNoContent struct {
	SetCookie string
}

// GetSetCookie returns the value of SetCookie.
func (s *PostAuthLogoutNoContent) GetSetCookie() string {
	return s.SetCookie
}

// SetSetCookie sets the value of SetCookie.
func (s *PostAuthLogoutNoContent) SetSetCookie(val string) {
	s.SetCookie = val
}

func (*PostAuthLogoutNoContent) postAuthLogoutRes() {}

// PostEventHitNoContent is response for PostEventHit operation.
type PostEventHitNoContent struct{}

func (*PostEventHitNoContent) postEventHitRes() {}

type StatsBrowsers []StatsBrowsersItem

func (*StatsBrowsers) getWebsiteIDBrowsersRes() {}

type StatsBrowsersItem struct {
	// Browser name.
	Browser string `json:"browser"`
	// Number of unique visitors from browser.
	Visitors int `json:"visitors"`
	// Percentage of unique visitors from browser.
	VisitorsPercentage float32 `json:"visitors_percentage"`
	// Number of bounces from referrer.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page from referrer in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetBrowser returns the value of Browser.
func (s *StatsBrowsersItem) GetBrowser() string {
	return s.Browser
}

// GetVisitors returns the value of Visitors.
func (s *StatsBrowsersItem) GetVisitors() int {
	return s.Visitors
}

// GetVisitorsPercentage returns the value of VisitorsPercentage.
func (s *StatsBrowsersItem) GetVisitorsPercentage() float32 {
	return s.VisitorsPercentage
}

// GetBounces returns the value of Bounces.
func (s *StatsBrowsersItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsBrowsersItem) GetDuration() OptInt {
	return s.Duration
}

// SetBrowser sets the value of Browser.
func (s *StatsBrowsersItem) SetBrowser(val string) {
	s.Browser = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsBrowsersItem) SetVisitors(val int) {
	s.Visitors = val
}

// SetVisitorsPercentage sets the value of VisitorsPercentage.
func (s *StatsBrowsersItem) SetVisitorsPercentage(val float32) {
	s.VisitorsPercentage = val
}

// SetBounces sets the value of Bounces.
func (s *StatsBrowsersItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsBrowsersItem) SetDuration(val OptInt) {
	s.Duration = val
}

type StatsCountries []StatsCountriesItem

func (*StatsCountries) getWebsiteIDCountryRes() {}

type StatsCountriesItem struct {
	// Country name.
	Country string `json:"country"`
	// Number of unique visitors from country.
	Visitors int `json:"visitors"`
	// Percentage of unique visitors from country.
	VisitorsPercentage float32 `json:"visitors_percentage"`
	// Number of bounces from referrer.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page from referrer in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetCountry returns the value of Country.
func (s *StatsCountriesItem) GetCountry() string {
	return s.Country
}

// GetVisitors returns the value of Visitors.
func (s *StatsCountriesItem) GetVisitors() int {
	return s.Visitors
}

// GetVisitorsPercentage returns the value of VisitorsPercentage.
func (s *StatsCountriesItem) GetVisitorsPercentage() float32 {
	return s.VisitorsPercentage
}

// GetBounces returns the value of Bounces.
func (s *StatsCountriesItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsCountriesItem) GetDuration() OptInt {
	return s.Duration
}

// SetCountry sets the value of Country.
func (s *StatsCountriesItem) SetCountry(val string) {
	s.Country = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsCountriesItem) SetVisitors(val int) {
	s.Visitors = val
}

// SetVisitorsPercentage sets the value of VisitorsPercentage.
func (s *StatsCountriesItem) SetVisitorsPercentage(val float32) {
	s.VisitorsPercentage = val
}

// SetBounces sets the value of Bounces.
func (s *StatsCountriesItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsCountriesItem) SetDuration(val OptInt) {
	s.Duration = val
}

type StatsDevices []StatsDevicesItem

func (*StatsDevices) getWebsiteIDDeviceRes() {}

type StatsDevicesItem struct {
	// Device name.
	Device string `json:"device"`
	// Number of unique visitors from device.
	Visitors int `json:"visitors"`
	// Percentage of unique visitors from device.
	VisitorsPercentage float32 `json:"visitors_percentage"`
	// Number of bounces from referrer.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page from referrer in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetDevice returns the value of Device.
func (s *StatsDevicesItem) GetDevice() string {
	return s.Device
}

// GetVisitors returns the value of Visitors.
func (s *StatsDevicesItem) GetVisitors() int {
	return s.Visitors
}

// GetVisitorsPercentage returns the value of VisitorsPercentage.
func (s *StatsDevicesItem) GetVisitorsPercentage() float32 {
	return s.VisitorsPercentage
}

// GetBounces returns the value of Bounces.
func (s *StatsDevicesItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsDevicesItem) GetDuration() OptInt {
	return s.Duration
}

// SetDevice sets the value of Device.
func (s *StatsDevicesItem) SetDevice(val string) {
	s.Device = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsDevicesItem) SetVisitors(val int) {
	s.Visitors = val
}

// SetVisitorsPercentage sets the value of VisitorsPercentage.
func (s *StatsDevicesItem) SetVisitorsPercentage(val float32) {
	s.VisitorsPercentage = val
}

// SetBounces sets the value of Bounces.
func (s *StatsDevicesItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsDevicesItem) SetDuration(val OptInt) {
	s.Duration = val
}

type StatsLanguages []StatsLanguagesItem

func (*StatsLanguages) getWebsiteIDLanguageRes() {}

type StatsLanguagesItem struct {
	// Language name.
	Language string `json:"language"`
	// Number of unique visitors for language.
	Visitors int `json:"visitors"`
	// Percentage of unique visitors for language.
	VisitorsPercentage float32 `json:"visitors_percentage"`
	// Number of bounces from referrer.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page from referrer in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetLanguage returns the value of Language.
func (s *StatsLanguagesItem) GetLanguage() string {
	return s.Language
}

// GetVisitors returns the value of Visitors.
func (s *StatsLanguagesItem) GetVisitors() int {
	return s.Visitors
}

// GetVisitorsPercentage returns the value of VisitorsPercentage.
func (s *StatsLanguagesItem) GetVisitorsPercentage() float32 {
	return s.VisitorsPercentage
}

// GetBounces returns the value of Bounces.
func (s *StatsLanguagesItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsLanguagesItem) GetDuration() OptInt {
	return s.Duration
}

// SetLanguage sets the value of Language.
func (s *StatsLanguagesItem) SetLanguage(val string) {
	s.Language = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsLanguagesItem) SetVisitors(val int) {
	s.Visitors = val
}

// SetVisitorsPercentage sets the value of VisitorsPercentage.
func (s *StatsLanguagesItem) SetVisitorsPercentage(val float32) {
	s.VisitorsPercentage = val
}

// SetBounces sets the value of Bounces.
func (s *StatsLanguagesItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsLanguagesItem) SetDuration(val OptInt) {
	s.Duration = val
}

type StatsOS []StatsOSItem

func (*StatsOS) getWebsiteIDOsRes() {}

type StatsOSItem struct {
	// OS name.
	Os string `json:"os"`
	// Number of unique visitors from OS.
	Visitors int `json:"visitors"`
	// Percentage of unique visitors from OS.
	VisitorsPercentage float32 `json:"visitors_percentage"`
	// Number of bounces from referrer.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page from referrer in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetOs returns the value of Os.
func (s *StatsOSItem) GetOs() string {
	return s.Os
}

// GetVisitors returns the value of Visitors.
func (s *StatsOSItem) GetVisitors() int {
	return s.Visitors
}

// GetVisitorsPercentage returns the value of VisitorsPercentage.
func (s *StatsOSItem) GetVisitorsPercentage() float32 {
	return s.VisitorsPercentage
}

// GetBounces returns the value of Bounces.
func (s *StatsOSItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsOSItem) GetDuration() OptInt {
	return s.Duration
}

// SetOs sets the value of Os.
func (s *StatsOSItem) SetOs(val string) {
	s.Os = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsOSItem) SetVisitors(val int) {
	s.Visitors = val
}

// SetVisitorsPercentage sets the value of VisitorsPercentage.
func (s *StatsOSItem) SetVisitorsPercentage(val float32) {
	s.VisitorsPercentage = val
}

// SetBounces sets the value of Bounces.
func (s *StatsOSItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsOSItem) SetDuration(val OptInt) {
	s.Duration = val
}

type StatsPages []StatsPagesItem

func (*StatsPages) getWebsiteIDPagesRes() {}

type StatsPagesItem struct {
	// Pathname of the page.
	Path string `json:"path"`
	// Number of unique visitors for given page.
	Visitors int `json:"visitors"`
	// Percentage of unique visitors for given page.
	VisitorsPercentage float32 `json:"visitors_percentage"`
	// Number of page views.
	Pageviews OptInt `json:"pageviews"`
	// Percentage of page views.
	PageviewsPercentage OptFloat32 `json:"pageviews_percentage"`
	// Number of bounces.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetPath returns the value of Path.
func (s *StatsPagesItem) GetPath() string {
	return s.Path
}

// GetVisitors returns the value of Visitors.
func (s *StatsPagesItem) GetVisitors() int {
	return s.Visitors
}

// GetVisitorsPercentage returns the value of VisitorsPercentage.
func (s *StatsPagesItem) GetVisitorsPercentage() float32 {
	return s.VisitorsPercentage
}

// GetPageviews returns the value of Pageviews.
func (s *StatsPagesItem) GetPageviews() OptInt {
	return s.Pageviews
}

// GetPageviewsPercentage returns the value of PageviewsPercentage.
func (s *StatsPagesItem) GetPageviewsPercentage() OptFloat32 {
	return s.PageviewsPercentage
}

// GetBounces returns the value of Bounces.
func (s *StatsPagesItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsPagesItem) GetDuration() OptInt {
	return s.Duration
}

// SetPath sets the value of Path.
func (s *StatsPagesItem) SetPath(val string) {
	s.Path = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsPagesItem) SetVisitors(val int) {
	s.Visitors = val
}

// SetVisitorsPercentage sets the value of VisitorsPercentage.
func (s *StatsPagesItem) SetVisitorsPercentage(val float32) {
	s.VisitorsPercentage = val
}

// SetPageviews sets the value of Pageviews.
func (s *StatsPagesItem) SetPageviews(val OptInt) {
	s.Pageviews = val
}

// SetPageviewsPercentage sets the value of PageviewsPercentage.
func (s *StatsPagesItem) SetPageviewsPercentage(val OptFloat32) {
	s.PageviewsPercentage = val
}

// SetBounces sets the value of Bounces.
func (s *StatsPagesItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsPagesItem) SetDuration(val OptInt) {
	s.Duration = val
}

type StatsReferrers []StatsReferrersItem

func (*StatsReferrers) getWebsiteIDReferrersRes() {}

type StatsReferrersItem struct {
	// Referrer URL.
	Referrer string `json:"referrer"`
	// Number of unique visitors from referrer.
	Visitors int `json:"visitors"`
	// Percentage of unique visitors from referrer.
	VisitorsPercentage float32 `json:"visitors_percentage"`
	// Number of bounces from referrer.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page from referrer in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetReferrer returns the value of Referrer.
func (s *StatsReferrersItem) GetReferrer() string {
	return s.Referrer
}

// GetVisitors returns the value of Visitors.
func (s *StatsReferrersItem) GetVisitors() int {
	return s.Visitors
}

// GetVisitorsPercentage returns the value of VisitorsPercentage.
func (s *StatsReferrersItem) GetVisitorsPercentage() float32 {
	return s.VisitorsPercentage
}

// GetBounces returns the value of Bounces.
func (s *StatsReferrersItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsReferrersItem) GetDuration() OptInt {
	return s.Duration
}

// SetReferrer sets the value of Referrer.
func (s *StatsReferrersItem) SetReferrer(val string) {
	s.Referrer = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsReferrersItem) SetVisitors(val int) {
	s.Visitors = val
}

// SetVisitorsPercentage sets the value of VisitorsPercentage.
func (s *StatsReferrersItem) SetVisitorsPercentage(val float32) {
	s.VisitorsPercentage = val
}

// SetBounces sets the value of Bounces.
func (s *StatsReferrersItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsReferrersItem) SetDuration(val OptInt) {
	s.Duration = val
}

// Ref: #/components/schemas/StatsSummary
type StatsSummary struct {
	Current  StatsSummaryCurrent        `json:"current"`
	Previous OptStatsSummaryPrevious    `json:"previous"`
	Interval []StatsSummaryIntervalItem `json:"interval"`
}

// GetCurrent returns the value of Current.
func (s *StatsSummary) GetCurrent() StatsSummaryCurrent {
	return s.Current
}

// GetPrevious returns the value of Previous.
func (s *StatsSummary) GetPrevious() OptStatsSummaryPrevious {
	return s.Previous
}

// GetInterval returns the value of Interval.
func (s *StatsSummary) GetInterval() []StatsSummaryIntervalItem {
	return s.Interval
}

// SetCurrent sets the value of Current.
func (s *StatsSummary) SetCurrent(val StatsSummaryCurrent) {
	s.Current = val
}

// SetPrevious sets the value of Previous.
func (s *StatsSummary) SetPrevious(val OptStatsSummaryPrevious) {
	s.Previous = val
}

// SetInterval sets the value of Interval.
func (s *StatsSummary) SetInterval(val []StatsSummaryIntervalItem) {
	s.Interval = val
}

func (*StatsSummary) getWebsiteIDSummaryRes() {}

type StatsSummaryCurrent struct {
	Visitors  int `json:"visitors"`
	Pageviews int `json:"pageviews"`
	Bounces   int `json:"bounces"`
	Duration  int `json:"duration"`
}

// GetVisitors returns the value of Visitors.
func (s *StatsSummaryCurrent) GetVisitors() int {
	return s.Visitors
}

// GetPageviews returns the value of Pageviews.
func (s *StatsSummaryCurrent) GetPageviews() int {
	return s.Pageviews
}

// GetBounces returns the value of Bounces.
func (s *StatsSummaryCurrent) GetBounces() int {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsSummaryCurrent) GetDuration() int {
	return s.Duration
}

// SetVisitors sets the value of Visitors.
func (s *StatsSummaryCurrent) SetVisitors(val int) {
	s.Visitors = val
}

// SetPageviews sets the value of Pageviews.
func (s *StatsSummaryCurrent) SetPageviews(val int) {
	s.Pageviews = val
}

// SetBounces sets the value of Bounces.
func (s *StatsSummaryCurrent) SetBounces(val int) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsSummaryCurrent) SetDuration(val int) {
	s.Duration = val
}

type StatsSummaryIntervalItem struct {
	Date      string `json:"date"`
	Visitors  int    `json:"visitors"`
	Pageviews OptInt `json:"pageviews"`
}

// GetDate returns the value of Date.
func (s *StatsSummaryIntervalItem) GetDate() string {
	return s.Date
}

// GetVisitors returns the value of Visitors.
func (s *StatsSummaryIntervalItem) GetVisitors() int {
	return s.Visitors
}

// GetPageviews returns the value of Pageviews.
func (s *StatsSummaryIntervalItem) GetPageviews() OptInt {
	return s.Pageviews
}

// SetDate sets the value of Date.
func (s *StatsSummaryIntervalItem) SetDate(val string) {
	s.Date = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsSummaryIntervalItem) SetVisitors(val int) {
	s.Visitors = val
}

// SetPageviews sets the value of Pageviews.
func (s *StatsSummaryIntervalItem) SetPageviews(val OptInt) {
	s.Pageviews = val
}

type StatsSummaryPrevious struct {
	Visitors  int `json:"visitors"`
	Pageviews int `json:"pageviews"`
	Bounces   int `json:"bounces"`
	Duration  int `json:"duration"`
}

// GetVisitors returns the value of Visitors.
func (s *StatsSummaryPrevious) GetVisitors() int {
	return s.Visitors
}

// GetPageviews returns the value of Pageviews.
func (s *StatsSummaryPrevious) GetPageviews() int {
	return s.Pageviews
}

// GetBounces returns the value of Bounces.
func (s *StatsSummaryPrevious) GetBounces() int {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsSummaryPrevious) GetDuration() int {
	return s.Duration
}

// SetVisitors sets the value of Visitors.
func (s *StatsSummaryPrevious) SetVisitors(val int) {
	s.Visitors = val
}

// SetPageviews sets the value of Pageviews.
func (s *StatsSummaryPrevious) SetPageviews(val int) {
	s.Pageviews = val
}

// SetBounces sets the value of Bounces.
func (s *StatsSummaryPrevious) SetBounces(val int) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsSummaryPrevious) SetDuration(val int) {
	s.Duration = val
}

type StatsTime []StatsTimeItem

func (*StatsTime) getWebsiteIDTimeRes() {}

type StatsTimeItem struct {
	// Pathname of the page.
	Path string `json:"path"`
	// Median time spent on page in milliseconds.
	Duration int `json:"duration"`
	// Total time spent on page in milliseconds for the upper quartile (75%).
	DurationUpperQuartile OptInt `json:"duration_upper_quartile"`
	// Total time spent on page in milliseconds for the lower quartile (25%).
	DurationLowerQuartile OptInt `json:"duration_lower_quartile"`
	// Percentage of time contributing to the total time spent on the website.
	DurationPercentage float32 `json:"duration_percentage"`
	// Number of unique visitors for given page.
	Visitors OptInt `json:"visitors"`
	// Number of bounces.
	Bounces OptInt `json:"bounces"`
}

// GetPath returns the value of Path.
func (s *StatsTimeItem) GetPath() string {
	return s.Path
}

// GetDuration returns the value of Duration.
func (s *StatsTimeItem) GetDuration() int {
	return s.Duration
}

// GetDurationUpperQuartile returns the value of DurationUpperQuartile.
func (s *StatsTimeItem) GetDurationUpperQuartile() OptInt {
	return s.DurationUpperQuartile
}

// GetDurationLowerQuartile returns the value of DurationLowerQuartile.
func (s *StatsTimeItem) GetDurationLowerQuartile() OptInt {
	return s.DurationLowerQuartile
}

// GetDurationPercentage returns the value of DurationPercentage.
func (s *StatsTimeItem) GetDurationPercentage() float32 {
	return s.DurationPercentage
}

// GetVisitors returns the value of Visitors.
func (s *StatsTimeItem) GetVisitors() OptInt {
	return s.Visitors
}

// GetBounces returns the value of Bounces.
func (s *StatsTimeItem) GetBounces() OptInt {
	return s.Bounces
}

// SetPath sets the value of Path.
func (s *StatsTimeItem) SetPath(val string) {
	s.Path = val
}

// SetDuration sets the value of Duration.
func (s *StatsTimeItem) SetDuration(val int) {
	s.Duration = val
}

// SetDurationUpperQuartile sets the value of DurationUpperQuartile.
func (s *StatsTimeItem) SetDurationUpperQuartile(val OptInt) {
	s.DurationUpperQuartile = val
}

// SetDurationLowerQuartile sets the value of DurationLowerQuartile.
func (s *StatsTimeItem) SetDurationLowerQuartile(val OptInt) {
	s.DurationLowerQuartile = val
}

// SetDurationPercentage sets the value of DurationPercentage.
func (s *StatsTimeItem) SetDurationPercentage(val float32) {
	s.DurationPercentage = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsTimeItem) SetVisitors(val OptInt) {
	s.Visitors = val
}

// SetBounces sets the value of Bounces.
func (s *StatsTimeItem) SetBounces(val OptInt) {
	s.Bounces = val
}

type StatsUTMCampaigns []StatsUTMCampaignsItem

func (*StatsUTMCampaigns) getWebsiteIDCampaignsRes() {}

type StatsUTMCampaignsItem struct {
	// UTM campaign.
	Campaign string `json:"campaign"`
	// Number of unique visitors from UTM campaign.
	Visitors int `json:"visitors"`
	// Percentage of unique visitors from UTM campaign.
	VisitorsPercentage float32 `json:"visitors_percentage"`
	// Number of bounces from referrer.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page from referrer in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetCampaign returns the value of Campaign.
func (s *StatsUTMCampaignsItem) GetCampaign() string {
	return s.Campaign
}

// GetVisitors returns the value of Visitors.
func (s *StatsUTMCampaignsItem) GetVisitors() int {
	return s.Visitors
}

// GetVisitorsPercentage returns the value of VisitorsPercentage.
func (s *StatsUTMCampaignsItem) GetVisitorsPercentage() float32 {
	return s.VisitorsPercentage
}

// GetBounces returns the value of Bounces.
func (s *StatsUTMCampaignsItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsUTMCampaignsItem) GetDuration() OptInt {
	return s.Duration
}

// SetCampaign sets the value of Campaign.
func (s *StatsUTMCampaignsItem) SetCampaign(val string) {
	s.Campaign = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsUTMCampaignsItem) SetVisitors(val int) {
	s.Visitors = val
}

// SetVisitorsPercentage sets the value of VisitorsPercentage.
func (s *StatsUTMCampaignsItem) SetVisitorsPercentage(val float32) {
	s.VisitorsPercentage = val
}

// SetBounces sets the value of Bounces.
func (s *StatsUTMCampaignsItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsUTMCampaignsItem) SetDuration(val OptInt) {
	s.Duration = val
}

type StatsUTMMediums []StatsUTMMediumsItem

func (*StatsUTMMediums) getWebsiteIDMediumsRes() {}

type StatsUTMMediumsItem struct {
	// UTM medium.
	Medium string `json:"medium"`
	// Number of unique visitors from UTM medium.
	Visitors int `json:"visitors"`
	// Percentage of unique visitors from UTM medium.
	VisitorsPercentage float32 `json:"visitors_percentage"`
	// Number of bounces from referrer.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page from referrer in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetMedium returns the value of Medium.
func (s *StatsUTMMediumsItem) GetMedium() string {
	return s.Medium
}

// GetVisitors returns the value of Visitors.
func (s *StatsUTMMediumsItem) GetVisitors() int {
	return s.Visitors
}

// GetVisitorsPercentage returns the value of VisitorsPercentage.
func (s *StatsUTMMediumsItem) GetVisitorsPercentage() float32 {
	return s.VisitorsPercentage
}

// GetBounces returns the value of Bounces.
func (s *StatsUTMMediumsItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsUTMMediumsItem) GetDuration() OptInt {
	return s.Duration
}

// SetMedium sets the value of Medium.
func (s *StatsUTMMediumsItem) SetMedium(val string) {
	s.Medium = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsUTMMediumsItem) SetVisitors(val int) {
	s.Visitors = val
}

// SetVisitorsPercentage sets the value of VisitorsPercentage.
func (s *StatsUTMMediumsItem) SetVisitorsPercentage(val float32) {
	s.VisitorsPercentage = val
}

// SetBounces sets the value of Bounces.
func (s *StatsUTMMediumsItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsUTMMediumsItem) SetDuration(val OptInt) {
	s.Duration = val
}

type StatsUTMSources []StatsUTMSourcesItem

func (*StatsUTMSources) getWebsiteIDSourcesRes() {}

type StatsUTMSourcesItem struct {
	// UTM source.
	Source string `json:"source"`
	// Number of unique visitors from UTM source.
	Visitors int `json:"visitors"`
	// Percentage of unique visitors from UTM source.
	VisitorsPercentage float32 `json:"visitors_percentage"`
	// Number of bounces from referrer.
	Bounces OptInt `json:"bounces"`
	// Total time spent on page from referrer in milliseconds.
	Duration OptInt `json:"duration"`
}

// GetSource returns the value of Source.
func (s *StatsUTMSourcesItem) GetSource() string {
	return s.Source
}

// GetVisitors returns the value of Visitors.
func (s *StatsUTMSourcesItem) GetVisitors() int {
	return s.Visitors
}

// GetVisitorsPercentage returns the value of VisitorsPercentage.
func (s *StatsUTMSourcesItem) GetVisitorsPercentage() float32 {
	return s.VisitorsPercentage
}

// GetBounces returns the value of Bounces.
func (s *StatsUTMSourcesItem) GetBounces() OptInt {
	return s.Bounces
}

// GetDuration returns the value of Duration.
func (s *StatsUTMSourcesItem) GetDuration() OptInt {
	return s.Duration
}

// SetSource sets the value of Source.
func (s *StatsUTMSourcesItem) SetSource(val string) {
	s.Source = val
}

// SetVisitors sets the value of Visitors.
func (s *StatsUTMSourcesItem) SetVisitors(val int) {
	s.Visitors = val
}

// SetVisitorsPercentage sets the value of VisitorsPercentage.
func (s *StatsUTMSourcesItem) SetVisitorsPercentage(val float32) {
	s.VisitorsPercentage = val
}

// SetBounces sets the value of Bounces.
func (s *StatsUTMSourcesItem) SetBounces(val OptInt) {
	s.Bounces = val
}

// SetDuration sets the value of Duration.
func (s *StatsUTMSourcesItem) SetDuration(val OptInt) {
	s.Duration = val
}

type UnauthorisedError struct {
	Error UnauthorisedErrorError `json:"error"`
}

// GetError returns the value of Error.
func (s *UnauthorisedError) GetError() UnauthorisedErrorError {
	return s.Error
}

// SetError sets the value of Error.
func (s *UnauthorisedError) SetError(val UnauthorisedErrorError) {
	s.Error = val
}

func (*UnauthorisedError) deleteUserRes()            {}
func (*UnauthorisedError) deleteWebsitesIDRes()      {}
func (*UnauthorisedError) getUserRes()               {}
func (*UnauthorisedError) getWebsiteIDBrowsersRes()  {}
func (*UnauthorisedError) getWebsiteIDCampaignsRes() {}
func (*UnauthorisedError) getWebsiteIDCountryRes()   {}
func (*UnauthorisedError) getWebsiteIDDeviceRes()    {}
func (*UnauthorisedError) getWebsiteIDLanguageRes()  {}
func (*UnauthorisedError) getWebsiteIDMediumsRes()   {}
func (*UnauthorisedError) getWebsiteIDOsRes()        {}
func (*UnauthorisedError) getWebsiteIDPagesRes()     {}
func (*UnauthorisedError) getWebsiteIDReferrersRes() {}
func (*UnauthorisedError) getWebsiteIDSourcesRes()   {}
func (*UnauthorisedError) getWebsiteIDSummaryRes()   {}
func (*UnauthorisedError) getWebsiteIDTimeRes()      {}
func (*UnauthorisedError) getWebsitesIDRes()         {}
func (*UnauthorisedError) getWebsitesRes()           {}
func (*UnauthorisedError) patchUserRes()             {}
func (*UnauthorisedError) patchWebsitesIDRes()       {}
func (*UnauthorisedError) postAuthLoginRes()         {}
func (*UnauthorisedError) postAuthLogoutRes()        {}
func (*UnauthorisedError) postWebsitesRes()          {}

type UnauthorisedErrorError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *UnauthorisedErrorError) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *UnauthorisedErrorError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *UnauthorisedErrorError) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *UnauthorisedErrorError) SetMessage(val string) {
	s.Message = val
}

// Response body for getting a user.
// Ref: #/components/schemas/UserGet
type UserGet struct {
	Username    string          `json:"username"`
	Language    UserGetLanguage `json:"language"`
	DateCreated int64           `json:"dateCreated"`
	DateUpdated int64           `json:"dateUpdated"`
}

// GetUsername returns the value of Username.
func (s *UserGet) GetUsername() string {
	return s.Username
}

// GetLanguage returns the value of Language.
func (s *UserGet) GetLanguage() UserGetLanguage {
	return s.Language
}

// GetDateCreated returns the value of DateCreated.
func (s *UserGet) GetDateCreated() int64 {
	return s.DateCreated
}

// GetDateUpdated returns the value of DateUpdated.
func (s *UserGet) GetDateUpdated() int64 {
	return s.DateUpdated
}

// SetUsername sets the value of Username.
func (s *UserGet) SetUsername(val string) {
	s.Username = val
}

// SetLanguage sets the value of Language.
func (s *UserGet) SetLanguage(val UserGetLanguage) {
	s.Language = val
}

// SetDateCreated sets the value of DateCreated.
func (s *UserGet) SetDateCreated(val int64) {
	s.DateCreated = val
}

// SetDateUpdated sets the value of DateUpdated.
func (s *UserGet) SetDateUpdated(val int64) {
	s.DateUpdated = val
}

func (*UserGet) getUserRes()   {}
func (*UserGet) patchUserRes() {}

type UserGetLanguage string

const (
	UserGetLanguageEn UserGetLanguage = "en"
)

// AllValues returns all UserGetLanguage values.
func (UserGetLanguage) AllValues() []UserGetLanguage {
	return []UserGetLanguage{
		UserGetLanguageEn,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserGetLanguage) MarshalText() ([]byte, error) {
	switch s {
	case UserGetLanguageEn:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserGetLanguage) UnmarshalText(data []byte) error {
	switch UserGetLanguage(data) {
	case UserGetLanguageEn:
		*s = UserGetLanguageEn
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Request body for updating a user.
// Ref: #/components/schemas/UserPatch
type UserPatch struct {
	Username OptString            `json:"username"`
	Password OptString            `json:"password"`
	Language OptUserPatchLanguage `json:"language"`
}

// GetUsername returns the value of Username.
func (s *UserPatch) GetUsername() OptString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *UserPatch) GetPassword() OptString {
	return s.Password
}

// GetLanguage returns the value of Language.
func (s *UserPatch) GetLanguage() OptUserPatchLanguage {
	return s.Language
}

// SetUsername sets the value of Username.
func (s *UserPatch) SetUsername(val OptString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *UserPatch) SetPassword(val OptString) {
	s.Password = val
}

// SetLanguage sets the value of Language.
func (s *UserPatch) SetLanguage(val OptUserPatchLanguage) {
	s.Language = val
}

type UserPatchLanguage string

const (
	UserPatchLanguageEn UserPatchLanguage = "en"
)

// AllValues returns all UserPatchLanguage values.
func (UserPatchLanguage) AllValues() []UserPatchLanguage {
	return []UserPatchLanguage{
		UserPatchLanguageEn,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserPatchLanguage) MarshalText() ([]byte, error) {
	switch s {
	case UserPatchLanguageEn:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserPatchLanguage) UnmarshalText(data []byte) error {
	switch UserPatchLanguage(data) {
	case UserPatchLanguageEn:
		*s = UserPatchLanguageEn
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Request body for creating a website.
// Ref: #/components/schemas/WebsiteCreate
type WebsiteCreate struct {
	Hostname string `json:"hostname"`
}

// GetHostname returns the value of Hostname.
func (s *WebsiteCreate) GetHostname() string {
	return s.Hostname
}

// SetHostname sets the value of Hostname.
func (s *WebsiteCreate) SetHostname(val string) {
	s.Hostname = val
}

// Response body for getting a website.
// Ref: #/components/schemas/WebsiteGet
type WebsiteGet struct {
	Hostname string               `json:"hostname"`
	Summary  OptWebsiteGetSummary `json:"summary"`
}

// GetHostname returns the value of Hostname.
func (s *WebsiteGet) GetHostname() string {
	return s.Hostname
}

// GetSummary returns the value of Summary.
func (s *WebsiteGet) GetSummary() OptWebsiteGetSummary {
	return s.Summary
}

// SetHostname sets the value of Hostname.
func (s *WebsiteGet) SetHostname(val string) {
	s.Hostname = val
}

// SetSummary sets the value of Summary.
func (s *WebsiteGet) SetSummary(val OptWebsiteGetSummary) {
	s.Summary = val
}

func (*WebsiteGet) getWebsitesIDRes()   {}
func (*WebsiteGet) patchWebsitesIDRes() {}
func (*WebsiteGet) postWebsitesRes()    {}

type WebsiteGetSummary struct {
	Visitors int `json:"visitors"`
}

// GetVisitors returns the value of Visitors.
func (s *WebsiteGetSummary) GetVisitors() int {
	return s.Visitors
}

// SetVisitors sets the value of Visitors.
func (s *WebsiteGetSummary) SetVisitors(val int) {
	s.Visitors = val
}

// Request body for updating a website.
// Ref: #/components/schemas/WebsitePatch
type WebsitePatch struct {
	Hostname OptString `json:"hostname"`
}

// GetHostname returns the value of Hostname.
func (s *WebsitePatch) GetHostname() OptString {
	return s.Hostname
}

// SetHostname sets the value of Hostname.
func (s *WebsitePatch) SetHostname(val OptString) {
	s.Hostname = val
}
