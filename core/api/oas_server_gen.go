// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DeleteUser implements delete-user operation.
	//
	// Delete a user account.
	//
	// DELETE /user
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// DeleteWebsitesID implements delete-websites-id operation.
	//
	// Delete a website.
	//
	// DELETE /websites/{hostname}
	DeleteWebsitesID(ctx context.Context, params DeleteWebsitesIDParams) (DeleteWebsitesIDRes, error)
	// GetEventPing implements get-event-ping operation.
	//
	// This is a ping endpoint to determine if the user is unique or not.
	//
	// GET /event/ping
	GetEventPing(ctx context.Context, params GetEventPingParams) (GetEventPingRes, error)
	// GetUser implements get-user operation.
	//
	// Retrieve the information of the user with the matching user ID.
	//
	// GET /user
	GetUser(ctx context.Context, params GetUserParams) (GetUserRes, error)
	// GetWebsiteIDBrowsers implements get-website-id-browsers operation.
	//
	// Get a list of browsers and their stats.
	//
	// GET /website/{hostname}/browsers
	GetWebsiteIDBrowsers(ctx context.Context, params GetWebsiteIDBrowsersParams) (GetWebsiteIDBrowsersRes, error)
	// GetWebsiteIDCampaigns implements get-website-id-campaigns operation.
	//
	// Get a list of UTM campaigns and their stats.
	//
	// GET /website/{hostname}/campaigns
	GetWebsiteIDCampaigns(ctx context.Context, params GetWebsiteIDCampaignsParams) (GetWebsiteIDCampaignsRes, error)
	// GetWebsiteIDCountry implements get-website-id-country operation.
	//
	// Get a list of countries and their stats.
	//
	// GET /website/{hostname}/countries
	GetWebsiteIDCountry(ctx context.Context, params GetWebsiteIDCountryParams) (GetWebsiteIDCountryRes, error)
	// GetWebsiteIDDevice implements get-website-id-device operation.
	//
	// Get a list of devices and their stats.
	//
	// GET /website/{hostname}/devices
	GetWebsiteIDDevice(ctx context.Context, params GetWebsiteIDDeviceParams) (GetWebsiteIDDeviceRes, error)
	// GetWebsiteIDLanguage implements get-website-id-language operation.
	//
	// Get a list of languages and their stats.
	//
	// GET /website/{hostname}/languages
	GetWebsiteIDLanguage(ctx context.Context, params GetWebsiteIDLanguageParams) (GetWebsiteIDLanguageRes, error)
	// GetWebsiteIDMediums implements get-website-id-mediums operation.
	//
	// Get a list of UTM mediums and their stats.
	//
	// GET /website/{hostname}/mediums
	GetWebsiteIDMediums(ctx context.Context, params GetWebsiteIDMediumsParams) (GetWebsiteIDMediumsRes, error)
	// GetWebsiteIDOs implements get-website-id-os operation.
	//
	// Get a list of OS and their stats.
	//
	// GET /website/{hostname}/os
	GetWebsiteIDOs(ctx context.Context, params GetWebsiteIDOsParams) (GetWebsiteIDOsRes, error)
	// GetWebsiteIDPages implements get-website-id-pages operation.
	//
	// Get a list of pages and their stats.
	//
	// GET /website/{hostname}/pages
	GetWebsiteIDPages(ctx context.Context, params GetWebsiteIDPagesParams) (GetWebsiteIDPagesRes, error)
	// GetWebsiteIDReferrers implements get-website-id-referrers operation.
	//
	// Get a list of referrers and their stats.
	//
	// GET /website/{hostname}/referrers
	GetWebsiteIDReferrers(ctx context.Context, params GetWebsiteIDReferrersParams) (GetWebsiteIDReferrersRes, error)
	// GetWebsiteIDSources implements get-website-id-sources operation.
	//
	// Get a list of UTM sources and their stats.
	//
	// GET /website/{hostname}/sources
	GetWebsiteIDSources(ctx context.Context, params GetWebsiteIDSourcesParams) (GetWebsiteIDSourcesRes, error)
	// GetWebsiteIDSummary implements get-website-id-summary operation.
	//
	// Get a summary of the website's stats.
	//
	// GET /website/{hostname}/summary
	GetWebsiteIDSummary(ctx context.Context, params GetWebsiteIDSummaryParams) (GetWebsiteIDSummaryRes, error)
	// GetWebsiteIDTime implements get-website-id-time operation.
	//
	// Get a list of pages and their time stats.
	//
	// GET /website/{hostname}/time
	GetWebsiteIDTime(ctx context.Context, params GetWebsiteIDTimeParams) (GetWebsiteIDTimeRes, error)
	// GetWebsites implements get-websites operation.
	//
	// Get a list of all websites from the user.
	//
	// GET /websites
	GetWebsites(ctx context.Context, params GetWebsitesParams) (GetWebsitesRes, error)
	// GetWebsitesID implements get-websites-id operation.
	//
	// Get website details for an individual website.
	//
	// GET /websites/{hostname}
	GetWebsitesID(ctx context.Context, params GetWebsitesIDParams) (GetWebsitesIDRes, error)
	// PatchUser implements patch-user operation.
	//
	// Update a user account's details.
	//
	// PATCH /user
	PatchUser(ctx context.Context, req *UserPatch, params PatchUserParams) (PatchUserRes, error)
	// PatchWebsitesID implements patch-websites-id operation.
	//
	// Update a website's information.
	//
	// PATCH /websites/{hostname}
	PatchWebsitesID(ctx context.Context, req *WebsitePatch, params PatchWebsitesIDParams) (PatchWebsitesIDRes, error)
	// PostAuthLogin implements post-auth-login operation.
	//
	// Login to the service and retrieve a session token for authentication.
	//
	// POST /auth/login
	PostAuthLogin(ctx context.Context, req *AuthLogin) (PostAuthLoginRes, error)
	// PostAuthLogout implements post-auth-logout operation.
	//
	// Logout of the service and destroy the session token.
	//
	// POST /auth/logout
	PostAuthLogout(ctx context.Context, params PostAuthLogoutParams) (PostAuthLogoutRes, error)
	// PostEventHit implements post-event-hit operation.
	//
	// Send a hit event to register a user view.
	//
	// POST /event/hit
	PostEventHit(ctx context.Context, req EventHit, params PostEventHitParams) (PostEventHitRes, error)
	// PostWebsites implements post-websites operation.
	//
	// Add a new website.
	//
	// POST /websites
	PostWebsites(ctx context.Context, req *WebsiteCreate) (PostWebsitesRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
